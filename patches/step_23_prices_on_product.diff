--- a/lib/src/routing/app_router.dart
+++ b/lib/src/routing/app_router.dart
@@ -1,15 +1,13 @@
 import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import '../features/scan/presentation/scan_screen.dart';
 import '../features/search/presentation/search_screen.dart';
-import '../features/prices/presentation/prices_screen.dart';
 import '../features/profile/presentation/profile_screen.dart';
 import '../features/profile/presentation/preferences_screen.dart';
 import 'scaffold_with_nav.dart';
 
 class AppRoutes {
   static const home = '/';
   static const prefs = '/prefs';
   static const scan = '/scan';
-  static const prices = '/prices';
   static const search = '/search';
   static const profile = '/profile';
 }
@@ -21,10 +19,8 @@ GoRouter createRouter() {
       routes: [
         GoRoute(path: AppRoutes.scan, builder: (_, __) => const ScanScreen()),
         GoRoute(path: AppRoutes.search, builder: (_, __) => const SearchScreen()),
-        GoRoute(path: AppRoutes.prices, builder: (_, __) => const PricesScreen()),
         GoRoute(path: AppRoutes.prefs, builder: (_, __) => const PreferencesScreen()),
         GoRoute(path: AppRoutes.profile, builder: (_, __) => const ProfileScreen()),
       ],
     ),
   );
 }
--- a/lib/src/routing/scaffold_with_nav.dart
+++ b/lib/src/routing/scaffold_with_nav.dart
@@ -1,13 +1,11 @@
 import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'app_router.dart';
 import 'package:provider/provider.dart';
 import '../data/prefs/prefs_repository.dart';
 import '../widgets/currency_symbol_icon.dart';
 
 class ScaffoldWithNav extends StatefulWidget {
   const ScaffoldWithNav({super.key, required this.child});
   final Widget child;
   @override
   State<ScaffoldWithNav> createState() => _ScaffoldWithNavState();
 }
 
 class _ScaffoldWithNavState extends State<ScaffoldWithNav> {
   int _index = 0;
@@ -20,23 +18,20 @@ class _ScaffoldWithNavState extends State<ScaffoldWithNav> {
     switch (location) {
       case AppRoutes.scan: return 1;
       case AppRoutes.search: return 2;
-      case AppRoutes.prices: return 3;
-      case AppRoutes.profile: return 4;
+      case AppRoutes.profile: return 3;
       default: return 0; // home
     }
   }
 
   void _onTap(int i) {
     setState(() => _index = i);
     switch (i) {
       case 0: context.go(AppRoutes.home); break;
       case 1: context.go(AppRoutes.scan); break;
       case 2: context.go(AppRoutes.search); break;
-      case 3: context.go(AppRoutes.prices); break;
-      case 4: context.go(AppRoutes.profile); break;
+      case 3: context.go(AppRoutes.profile); break;
     }
   }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
       body: widget.child,
       bottomNavigationBar: NavigationBar(
         selectedIndex: _index,
         onDestinationSelected: _onTap,
         destinations: [
           const NavigationDestination(icon: Icon(Icons.home_outlined), selectedIcon: Icon(Icons.home), label: 'Home'),
           const NavigationDestination(icon: Icon(Icons.qr_code_scanner), selectedIcon: Icon(Icons.qr_code), label: 'Scan'),
           const NavigationDestination(icon: Icon(Icons.search_outlined), selectedIcon: Icon(Icons.search), label: 'Search'),
-          // Removed standalone Prices tab (Step 23)
-          NavigationDestination(icon: CurrencySymbolIcon(code: null), selectedIcon: CurrencySymbolIcon(code: null), label: 'â€”'),
-          const NavigationDestination(icon: Icon(Icons.person_outline), selectedIcon: Icon(Icons.person), label: 'Profile'),
+          const NavigationDestination(icon: Icon(Icons.person_outline), selectedIcon: Icon(Icons.person), label: 'Profile'),
         ],
       ),
-      drawer: _AppDrawer(onSelect: _onTap, currentIndex: _index),
+      drawer: _AppDrawer(onSelect: _onTap, currentIndex: _index),
     );
   }
 }
@@ -63,18 +58,17 @@ class _AppDrawer extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
     final prefs = context.watch<PrefsController>().prefs;
     final code = prefs.currency;
     return Drawer(
       child: SafeArea(
         child: ListView(
           children: [
             const DrawerHeader(child: Text('EATINSIGHT')),
             ListTile(leading: const Icon(Icons.home), title: const Text('Home'), onTap: () => onSelect(0)),
             ListTile(leading: const Icon(Icons.qr_code), title: const Text('Scan'), onTap: () => onSelect(1)),
             ListTile(leading: const Icon(Icons.search), title: const Text('Search'), onTap: () => onSelect(2)),
-            ListTile(leading: CurrencySymbolIcon(code: code), title: const Text('Prices'), onTap: () => onSelect(3)),
-            ListTile(leading: const Icon(Icons.person), title: const Text('Profile'), onTap: () => onSelect(4)),
+            // Removed standalone Prices entry (Step 23)
+            ListTile(leading: const Icon(Icons.person), title: const Text('Profile'), onTap: () => onSelect(3)),
           ],
         ),
       ),
     );
   }
 }
--- /dev/null
+++ b/lib/src/data/prices/open_prices_api.dart
@@ -0,0 +1,129 @@
+import 'package:openfoodfacts/openfoodfacts.dart';
+
+/// Thin wrapper around OFF Open Prices API to get prices for a barcode.
+class OpenPricesApi {
+  /// Returns the latest prices for a barcode.
+  /// If [countryCode] is provided (ISO 2 upper, e.g. 'IN'), the list is filtered client-side.
+  static Future<List<Price>> getPricesForBarcode({
+    required String barcode,
+    String? countryCode,
+    int pageSize = 100,
+  }) async {
+    final params = GetPricesParameters()
+      ..productCode = barcode
+      ..pageSize = pageSize
+      ..pageNumber = 1;
+    final res = await OpenPricesAPIClient.getPrices(params);
+    final items = res.value?.items ?? const <Price>[];
+    if (countryCode == null || countryCode.trim().isEmpty) {
+      return items;
+    }
+    final cc = countryCode.trim().toUpperCase();
+    return items.where((p) => p.location?.countryCode?.toUpperCase() == cc).toList();
+  }
+
+  /// Returns at most one **latest** price per country.
+  static List<Price> latestPerCountry(List<Price> all) {
+    final map = <String, Price>{};
+    for (final p in all) {
+      final cc = p.location?.countryCode?.toUpperCase();
+      if (cc == null) continue;
+      final prev = map[cc];
+      if (prev == null || (p.date ?? p.created ?? DateTime(1970)).isAfter(prev.date ?? prev.created ?? DateTime(1970))) {
+        map[cc] = p;
+      }
+    }
+    return map.values.toList();
+  }
+}
--- /dev/null
+++ b/lib/src/data/fx/fx_api.dart
@@ -0,0 +1,69 @@
+import 'package:dio/dio.dart';
+
+/// Minimal FX converter using exchangerate.host. No API key required.
+class FxApi {
+  final Dio _dio;
+  FxApi([Dio? dio]) : _dio = dio ?? Dio(BaseOptions(connectTimeout: const Duration(seconds: 10), receiveTimeout: const Duration(seconds: 10)));
+
+  /// Converts [amount] from [from] to [to]. Returns null on failure.
+  Future<double?> convert({required double amount, required String from, required String to}) async {
+    try {
+      final url = 'https://api.exchangerate.host/convert?from=$from&to=$to&amount=$amount';
+      final res = await _dio.get(url);
+      final data = res.data;
+      final ok = (data is Map) ? (data['success'] == true || data['result'] != null) : false;
+      if (!ok) return null;
+      final result = (data['result'] as num?)?.toDouble();
+      return result;
+    } catch (_) {
+      return null;
+    }
+  }
+}
--- /dev/null
+++ b/lib/src/features/product/presentation/widgets/product_prices_tile.dart
@@ -0,0 +1,177 @@
+import 'package:flutter/material.dart';
+import 'package:provider/provider.dart';
+import 'package:openfoodfacts/openfoodfacts.dart';
+import '../../../../data/prices/open_prices_api.dart';
+import '../../../../data/fx/fx_api.dart';
+import '../../../../data/prefs/prefs_repository.dart';
+import '../../../../data/models/product.dart';
+
+class ProductPricesTile extends StatefulWidget {
+  final Product product;
+  const ProductPricesTile({super.key, required this.product});
+
+  @override
+  State<ProductPricesTile> createState() => _ProductPricesTileState();
+}
+
+class _ProductPricesTileState extends State<ProductPricesTile> {
+  late Future<List<_DisplayLine>> _future;
+
+  @override
+  void initState() {
+    super.initState();
+    _future = _load();
+  }
+
+  Future<List<_DisplayLine>> _load() async {
+    final prefs = context.read<PrefsController>().prefs;
+    final cc = prefs.country?.toUpperCase();
+    final userCur = (prefs.currency ?? '').trim().toUpperCase();
+    final all = await OpenPricesApi.getPricesForBarcode(barcode: widget.product.barcode, countryCode: cc);
+    if (all.isEmpty) return const <_DisplayLine>[];
+    // If a country is selected: show only that country (latest entries per store), else latest per country worldwide.
+    final list = (cc == null || cc.isEmpty) ? OpenPricesApi.latestPerCountry(all) : OpenPricesApi.latestPerCountry(all);
+    // Build display lines with optional conversion.
+    final fx = FxApi();
+    final lines = <_DisplayLine>[];
+    for (final p in list) {
+      final native = p.currency.currencyCode;
+      final amount = (p.price is int) ? (p.price as int).toDouble() : (p.price as num).toDouble();
+      double? conv;
+      if (userCur.isNotEmpty && userCur != native) {
+        conv = await fx.convert(amount: amount, from: native, to: userCur);
+      }
+      lines.add(_DisplayLine(
+        countryCode: p.location?.countryCode?.toUpperCase() ?? '',
+        nativeCurrency: native,
+        nativeAmount: amount,
+        convertedCurrency: (conv != null) ? userCur : null,
+        convertedAmount: conv,
+      ));
+      if (lines.length >= 8) break; // keep UI compact
+    }
+    return lines;
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return FutureBuilder<List<_DisplayLine>>(
+      future: _future,
+      builder: (context, snap) {
+        if (snap.connectionState == ConnectionState.waiting) {
+          return const ListTile(title: Text('Prices'), subtitle: Text('Loadingâ€¦'));
+        }
+        if (snap.hasError) {
+          return ListTile(title: const Text('Prices'), subtitle: Text('Could not load prices.'));
+        }
+        final lines = snap.data ?? const <_DisplayLine>[];
+        if (lines.isEmpty) {
+          return const ListTile(title: Text('Prices'), subtitle: Text('No prices listed.'));
+        }
+        return Padding(
+          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
+          child: Column(
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              Text('Prices', style: Theme.of(context).textTheme.titleMedium),
+              const SizedBox(height: 8),
+              ...lines.map((l) => _PriceRow(line: l)),
+            ],
+          ),
+        );
+      },
+    );
+  }
+}
+
+class _PriceRow extends StatelessWidget {
+  const _PriceRow({required this.line});
+  final _DisplayLine line;
+
+  @override
+  Widget build(BuildContext context) {
+    final native = _fmt(line.nativeAmount) + ' ' + line.nativeCurrency;
+    final bracket = (line.convertedCurrency != null && line.convertedAmount != null)
+        ? ' (${_fmt(line.convertedAmount!)} ${line.convertedCurrency})'
+        : '';
+    final text = '$native$bracket';
+    return Padding(
+      padding: const EdgeInsets.symmetric(vertical: 2),
+      child: Row(
+        children: [
+          if (line.countryCode.isNotEmpty)
+            Container(
+              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
+              decoration: BoxDecoration(
+                borderRadius: BorderRadius.circular(12),
+                color: Theme.of(context).colorScheme.surfaceVariant,
+              ),
+              child: Text(line.countryCode, style: Theme.of(context).textTheme.labelSmall),
+            ),
+          const SizedBox(width: 8),
+          Flexible(child: Text(text, style: Theme.of(context).textTheme.bodyMedium)),
+        ],
+      ),
+    );
+  }
+
+  String _fmt(double v) {
+    if (v >= 10) return v.toStringAsFixed(0);
+    if (v >= 1) return v.toStringAsFixed(2);
+    return v.toStringAsFixed(3);
+  }
+}
+
+class _DisplayLine {
+  final String countryCode;
+  final String nativeCurrency;
+  final double nativeAmount;
+  final String? convertedCurrency;
+  final double? convertedAmount;
+  const _DisplayLine({
+    required this.countryCode,
+    required this.nativeCurrency,
+    required this.nativeAmount,
+    required this.convertedCurrency,
+    required this.convertedAmount,
+  });
+}
--- a/lib/src/features/product/presentation/product_screen.dart
+++ b/lib/src/features/product/presentation/product_screen.dart
@@ -12,6 +12,7 @@ import '../../../routing/app_router.dart';
 import '../../../data/off/off_auth.dart';
 import 'add_photo_sheet.dart';
 import 'edit_product_sheet.dart';
+import 'widgets/product_prices_tile.dart';
 
 class ProductScreen extends StatefulWidget {
   final String barcode;
@@ -117,6 +118,14 @@ class _ProductScreenState extends State<ProductScreen> {
                 ),
               ],
             ),
+            const SizedBox(height: 8),
+            // Step 23: Inline Prices
+            Card(
+              margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
+              child: ProductPricesTile(product: product),
+            ),
+            const SizedBox(height: 12),
+
             // ... rest of the product sections
           ],
         ),

diff --git a/lib/main.dart b/lib/main.dart
index 1e51d3b..a4e5711 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -6,6 +6,8 @@ import 'src/data/off/off_auth.dart';
 import 'src/data/off/off_config.dart';
 import 'src/data/fooddb_repository.dart';
 import 'src/data/prefs/prefs_repository.dart';
+import 'src/data/lists/lists_controller.dart';
+import 'src/data/lists/lists_store.dart';
 
 void main() {
   WidgetsFlutterBinding.ensureInitialized();
@@ -23,7 +25,15 @@ class EatInsightApp extends StatelessWidget {
       providers: [
         Provider<FoodDbRepository>(create: (_) => FoodDbRepository()),
         ChangeNotifierProvider<OffAuth>(create: (_) => OffAuth()..init()),
-        ChangeNotifierProvider(create: (_) => PrefsController(PrefsRepository())..load()),
+        ChangeNotifierProvider(
+            create: (_) => PrefsController(PrefsRepository())..load()),
+        ChangeNotifierProvider(
+          create: (_) {
+            final controller = ListsController(ListsStore());
+            controller.load();
+            return controller;
+          },
+        ),
       ],
       child: MaterialApp.router(
         debugShowCheckedModeBanner: false,
diff --git a/lib/src/data/lists/lists_controller.dart b/lib/src/data/lists/lists_controller.dart
new file mode 100644
index 0000000..c0e0f54
--- /dev/null
+++ b/lib/src/data/lists/lists_controller.dart
@@ -0,0 +1,119 @@
+import 'package:flutter/foundation.dart';
+
+import 'lists_store.dart';
+
+class ListsController extends ChangeNotifier {
+  final ListsStore _store;
+  Exception? _error;
+  Map<String, UserList> _lists = <String, UserList>{};
+  String? _activeId;
+  bool _loading = false;
+
+  ListsController(this._store);
+
+  bool get loading => _loading;
+  String? get activeId => _activeId;
+  UserList? get active => _activeId == null ? null : _lists[_activeId];
+  List<UserList> get all => _lists.values.toList()
+    ..sort((a, b) => b.updatedAtMillis.compareTo(a.updatedAtMillis));
+
+  String? get error => _error?.toString();
+
+  Future<void> load() async {
+    _loading = true;
+    notifyListeners();
+    try {
+      _lists = await _store.loadAll();
+      _activeId = await _store.loadActiveId();
+    } catch (e) {
+      _error = Exception(e.toString());
+    } finally {
+      _loading = false;
+      notifyListeners();
+    }
+  }
+
+  Future<void> setActive(String? id) async {
+    _activeId = id;
+    await _store.saveActiveId(id);
+    notifyListeners();
+  }
+
+  Future<void> createList(String name) async {
+    final String id = DateTime.now().millisecondsSinceEpoch.toString();
+    _lists[id] = UserList(
+      id: id,
+      name: name.trim().isEmpty ? 'My list' : name.trim(),
+      barcodes: const <String>[],
+      updatedAtMillis: DateTime.now().millisecondsSinceEpoch,
+    );
+    await _store.saveAll(_lists);
+    if (_activeId == null) {
+      await setActive(id);
+    } else {
+      notifyListeners();
+    }
+  }
+
+  Future<void> renameList(String id, String name) async {
+    final UserList? existing = _lists[id];
+    if (existing == null) return;
+    _lists[id] = existing.copyWith(
+      name: name.trim().isEmpty ? existing.name : name.trim(),
+      updatedAtMillis: DateTime.now().millisecondsSinceEpoch,
+    );
+    await _store.saveAll(_lists);
+    notifyListeners();
+  }
+
+  Future<void> deleteList(String id) async {
+    _lists.remove(id);
+    if (_activeId == id) {
+      _activeId = _lists.isEmpty ? null : _lists.values.first.id;
+      await _store.saveActiveId(_activeId);
+    }
+    await _store.saveAll(_lists);
+    notifyListeners();
+  }
+
+  Future<bool> addBarcode(String barcode) async {
+    final UserList? current = active;
+    if (current == null) return false;
+    if (current.barcodes.contains(barcode)) return true;
+    final UserList next = current.copyWith(
+      barcodes: <String>[...current.barcodes, barcode],
+      updatedAtMillis: DateTime.now().millisecondsSinceEpoch,
+    );
+    _lists[current.id] = next;
+    await _store.saveAll(_lists);
+    notifyListeners();
+    return true;
+  }
+
+  Future<void> removeBarcode(String barcode) async {
+    final UserList? current = active;
+    if (current == null) return;
+    final UserList next = current.copyWith(
+      barcodes: current.barcodes.where((b) => b != barcode).toList(),
+      updatedAtMillis: DateTime.now().millisecondsSinceEpoch,
+    );
+    _lists[current.id] = next;
+    await _store.saveAll(_lists);
+    notifyListeners();
+  }
+
+  Future<String?> exportListById(String id) async {
+    final UserList? list = _lists[id];
+    if (list == null) return null;
+    return _store.exportList(list);
+  }
+
+  Future<bool> importFromPath(String filePath) async {
+    final UserList? imported = await _store.importList(filePath);
+    if (imported == null) return false;
+    _lists[imported.id] = imported;
+    await _store.saveAll(_lists);
+    notifyListeners();
+    return true;
+  }
+}
diff --git a/lib/src/data/lists/lists_store.dart b/lib/src/data/lists/lists_store.dart
new file mode 100644
index 0000000..3744552
--- /dev/null
+++ b/lib/src/data/lists/lists_store.dart
@@ -0,0 +1,138 @@
+import 'dart:convert';
+import 'dart:io';
+import 'package:path_provider/path_provider.dart';
+
+class UserList {
+  final String id;
+  final String name;
+  final List<String> barcodes;
+  final int updatedAtMillis;
+
+  const UserList({
+    required this.id,
+    required this.name,
+    required this.barcodes,
+    required this.updatedAtMillis,
+  });
+
+  UserList copyWith({
+    String? id,
+    String? name,
+    List<String>? barcodes,
+    int? updatedAtMillis,
+  }) =>
+      UserList(
+        id: id ?? this.id,
+        name: name ?? this.name,
+        barcodes: barcodes ?? this.barcodes,
+        updatedAtMillis: updatedAtMillis ?? this.updatedAtMillis,
+      );
+
+  Map<String, dynamic> toJson() => {
+        'id': id,
+        'name': name,
+        'barcodes': barcodes,
+        'updated_at': updatedAtMillis,
+      };
+
+  factory UserList.fromJson(Map<String, dynamic> json) => UserList(
+        id: json['id'] as String,
+        name: json['name'] as String,
+        barcodes: (json['barcodes'] as List?)?.whereType<String>().toList() ??
+            const <String>[],
+        updatedAtMillis: (json['updated_at'] as num?)?.toInt() ??
+            DateTime.now().millisecondsSinceEpoch,
+      );
+}
+
+class ListsStore {
+  static const String _listsFile = 'lists.json';
+  static const String _activeFile = 'lists_active.json';
+
+  Future<File> _file(String name) async {
+    final Directory dir = await getApplicationDocumentsDirectory();
+    return File('${dir.path}/$name');
+  }
+
+  Future<Map<String, UserList>> loadAll() async {
+    try {
+      final File f = await _file(_listsFile);
+      if (!await f.exists()) return <String, UserList>{};
+      final String txt = await f.readAsString();
+      final dynamic data = jsonDecode(txt);
+      if (data is List) {
+        final Map<String, UserList> map = <String, UserList>{};
+        for (final dynamic entry in data) {
+          if (entry is Map<String, dynamic>) {
+            final UserList list = UserList.fromJson(entry);
+            map[list.id] = list;
+          }
+        }
+        return map;
+      }
+      return <String, UserList>{};
+    } catch (_) {
+      return <String, UserList>{};
+    }
+  }
+
+  Future<void> saveAll(Map<String, UserList> lists) async {
+    final File f = await _file(_listsFile);
+    final List<Map<String, dynamic>> arr =
+        lists.values.map((UserList e) => e.toJson()).toList();
+    await f.writeAsString(jsonEncode(arr));
+  }
+
+  Future<String?> loadActiveId() async {
+    try {
+      final File f = await _file(_activeFile);
+      if (!await f.exists()) return null;
+      final String txt = await f.readAsString();
+      final dynamic data = jsonDecode(txt);
+      if (data is Map && data['active_id'] is String) {
+        return data['active_id'] as String;
+      }
+      return null;
+    } catch (_) {
+      return null;
+    }
+  }
+
+  Future<void> saveActiveId(String? id) async {
+    final File f = await _file(_activeFile);
+    await f.writeAsString(jsonEncode(<String, dynamic>{'active_id': id}));
+  }
+
+  Future<String> exportList(UserList list) async {
+    final Directory dir = await getApplicationDocumentsDirectory();
+    final String safe = list.name
+        .toLowerCase()
+        .replaceAll(RegExp(r'[^a-z0-9]+'), '_')
+        .replaceAll(RegExp(r'_+'), '_');
+    final String fname =
+        'export_${safe}_${DateTime.now().millisecondsSinceEpoch}.json';
+    final File f = File('${dir.path}/$fname');
+    await f.writeAsString(jsonEncode(list.toJson()));
+    return f.path;
+  }
+
+  Future<UserList?> importList(String filePath) async {
+    try {
+      final File f = File(filePath);
+      if (!await f.exists()) return null;
+      final String txt = await f.readAsString();
+      final dynamic data = jsonDecode(txt);
+      if (data is Map<String, dynamic>) {
+        final UserList src = UserList.fromJson(data);
+        final String newId = DateTime.now().millisecondsSinceEpoch.toString();
+        return src.copyWith(
+          id: newId,
+          updatedAtMillis: DateTime.now().millisecondsSinceEpoch,
+        );
+      }
+      return null;
+    } catch (_) {
+      return null;
+    }
+  }
+}
diff --git a/lib/src/features/lists/presentation/lists_screen.dart b/lib/src/features/lists/presentation/lists_screen.dart
index 080250e..cac7f84 100644
--- a/lib/src/features/lists/presentation/lists_screen.dart
+++ b/lib/src/features/lists/presentation/lists_screen.dart
@@ -1,12 +1,223 @@
 import 'package:flutter/material.dart';
+import 'package:provider/provider.dart';
 
-class ListsScreen extends StatelessWidget {
+import '../../../data/lists/lists_controller.dart';
+import '../../../data/lists/lists_store.dart';
+
+class ListsScreen extends StatefulWidget {
   const ListsScreen({super.key});
+
+  @override
+  State<ListsScreen> createState() => _ListsScreenState();
+}
+
+class _ListsScreenState extends State<ListsScreen> {
+  final TextEditingController _nameCtrl = TextEditingController();
+  final TextEditingController _importCtrl = TextEditingController();
+
+  @override
+  void dispose() {
+    _nameCtrl.dispose();
+    _importCtrl.dispose();
+    super.dispose();
+  }
+
   @override
   Widget build(BuildContext context) {
+    final ListsController controller = context.watch<ListsController>();
+    final List<UserList> lists = controller.all;
+    final String? activeId = controller.activeId;
+
     return Scaffold(
       appBar: AppBar(title: const Text('Lists')),
-      body: const Center(child: Text('Lists feature in Step 11')),
+      body: Padding(
+        padding: const EdgeInsets.all(16),
+        child: Column(
+          crossAxisAlignment: CrossAxisAlignment.start,
+          children: <Widget>[
+            Row(
+              children: <Widget>[
+                Expanded(
+                  child: TextField(
+                    controller: _nameCtrl,
+                    decoration:
+                        const InputDecoration(labelText: 'New list name'),
+                  ),
+                ),
+                const SizedBox(width: 8),
+                FilledButton(
+                  onPressed: () async {
+                    final listsController = context.read<ListsController>();
+                    final messenger = ScaffoldMessenger.of(context);
+                    await listsController.createList(_nameCtrl.text);
+                    _nameCtrl.clear();
+                    if (!mounted) return;
+                    messenger.showSnackBar(
+                      const SnackBar(content: Text('List created')),
+                    );
+                  },
+                  child: const Text('Create'),
+                ),
+              ],
+            ),
+            const SizedBox(height: 16),
+            if (lists.isEmpty)
+              const Text('No lists yet. Create one to get started.')
+            else ...<Widget>[
+              const Text('Your lists:'),
+              const SizedBox(height: 8),
+              Expanded(
+                child: ListView.separated(
+                  itemCount: lists.length,
+                  separatorBuilder: (_, __) => const Divider(height: 0),
+                  itemBuilder: (BuildContext context, int index) {
+                    final UserList list = lists[index];
+                    final bool isActive = list.id == activeId;
+                    return ListTile(
+                      leading: Icon(isActive
+                          ? Icons.check_circle
+                          : Icons.circle_outlined),
+                      title: Text(list.name),
+                      subtitle: Text('${list.barcodes.length} items'),
+                      onTap: () =>
+                          context.read<ListsController>().setActive(list.id),
+                      trailing: PopupMenuButton<String>(
+                        onSelected: (String value) async {
+                          final listsController =
+                              context.read<ListsController>();
+                          final messenger = ScaffoldMessenger.of(context);
+                          if (value == 'set') {
+                            await listsController.setActive(list.id);
+                          } else if (value == 'rename') {
+                            final String? newName =
+                                await _promptRename(context, list.name);
+                            if (newName != null) {
+                              await listsController.renameList(
+                                list.id,
+                                newName,
+                              );
+                            }
+                          } else if (value == 'delete') {
+                            await listsController.deleteList(list.id);
+                          } else if (value == 'export') {
+                            final String? path =
+                                await listsController.exportListById(list.id);
+                            if (!mounted) return;
+                            if (path != null) {
+                              messenger.showSnackBar(
+                                SnackBar(content: Text('Exported to: $path')),
+                              );
+                            }
+                          }
+                        },
+                        itemBuilder: (BuildContext context) =>
+                            <PopupMenuEntry<String>>[
+                          const PopupMenuItem<String>(
+                            value: 'set',
+                            child: Text('Set active'),
+                          ),
+                          const PopupMenuItem<String>(
+                            value: 'rename',
+                            child: Text('Rename'),
+                          ),
+                          const PopupMenuItem<String>(
+                            value: 'export',
+                            child: Text('Export as JSON'),
+                          ),
+                          const PopupMenuItem<String>(
+                            value: 'delete',
+                            child: Text('Delete'),
+                          ),
+                        ],
+                      ),
+                    );
+                  },
+                ),
+              ),
+              const SizedBox(height: 12),
+              Row(
+                children: <Widget>[
+                  Expanded(
+                    child: TextField(
+                      controller: _importCtrl,
+                      decoration: const InputDecoration(
+                        labelText: 'Import file path (JSON)',
+                        helperText: 'Paste a file path to import a list',
+                      ),
+                    ),
+                  ),
+                  const SizedBox(width: 8),
+                  OutlinedButton(
+                    onPressed: () async {
+                      final listsController = context.read<ListsController>();
+                      final messenger = ScaffoldMessenger.of(context);
+                      final bool ok = await listsController
+                          .importFromPath(_importCtrl.text.trim());
+                      if (!mounted) return;
+                      messenger.showSnackBar(
+                        SnackBar(
+                          content:
+                              Text(ok ? 'Imported list' : 'Could not import'),
+                        ),
+                      );
+                    },
+                    child: const Text('Import'),
+                  ),
+                ],
+              ),
+            ],
+            if (lists.isNotEmpty && controller.active != null) ...<Widget>[
+              const SizedBox(height: 16),
+              Text(
+                'Active list items (${controller.active!.barcodes.length})',
+                style: Theme.of(context).textTheme.titleSmall,
+              ),
+              const SizedBox(height: 8),
+              Expanded(
+                child: ListView.builder(
+                  itemCount: controller.active!.barcodes.length,
+                  itemBuilder: (BuildContext context, int index) {
+                    final String code = controller.active!.barcodes[index];
+                    return ListTile(
+                      leading: const Icon(Icons.qr_code_2),
+                      title: Text(code),
+                      trailing: IconButton(
+                        icon: const Icon(Icons.delete_outline),
+                        onPressed: () =>
+                            context.read<ListsController>().removeBarcode(code),
+                      ),
+                    );
+                  },
+                ),
+              ),
+            ],
+          ],
+        ),
+      ),
+    );
+  }
+
+  Future<String?> _promptRename(BuildContext context, String current) async {
+    final TextEditingController ctrl = TextEditingController(text: current);
+    return showDialog<String>(
+      context: context,
+      builder: (BuildContext ctx) => AlertDialog(
+        title: const Text('Rename list'),
+        content: TextField(
+          controller: ctrl,
+          decoration: const InputDecoration(labelText: 'Name'),
+        ),
+        actions: <Widget>[
+          TextButton(
+            onPressed: () => Navigator.pop(ctx),
+            child: const Text('Cancel'),
+          ),
+          FilledButton(
+            onPressed: () => Navigator.pop(ctx, ctrl.text),
+            child: const Text('Save'),
+          ),
+        ],
+      ),
     );
   }
 }
diff --git a/lib/src/features/product/presentation/product_screen.dart b/lib/src/features/product/presentation/product_screen.dart
index 3db0af9..d2d359c 100644
--- a/lib/src/features/product/presentation/product_screen.dart
+++ b/lib/src/features/product/presentation/product_screen.dart
@@ -6,6 +6,7 @@ import '../../../data/fooddb_repository.dart';
 import '../../../data/models/product.dart';
 import '../../../routing/app_router.dart';
 import '../../../data/off/off_auth.dart';
+import '../../../data/lists/lists_controller.dart';
 import 'add_photo_sheet.dart';
 import 'edit_product_sheet.dart';
 import 'robotoff_questions_sheet.dart';
@@ -52,11 +53,39 @@ class _ProductScreenState extends State<ProductScreen> {
   @override
   Widget build(BuildContext context) {
     final loggedIn = context.watch<OffAuth>().isLoggedIn;
+    final lists = context.watch<ListsController>();
     return Scaffold(
       appBar: AppBar(
         title: const Text('Product'),
         actions: [
           IconButton(onPressed: _refresh, icon: const Icon(Icons.refresh)),
+          if (lists.active != null)
+            IconButton(
+              tooltip: 'Add to list',
+              icon: const Icon(Icons.playlist_add),
+              onPressed: () async {
+                final messenger = ScaffoldMessenger.of(context);
+                final listsController = context.read<ListsController>();
+                final product = _latestProduct ?? await _future;
+                if (!mounted) return;
+                if (product == null) {
+                  messenger.showSnackBar(
+                    const SnackBar(content: Text('Load the product first')),
+                  );
+                  return;
+                }
+                final bool ok =
+                    await listsController.addBarcode(product.barcode);
+                if (!mounted) return;
+                messenger.showSnackBar(
+                  SnackBar(
+                    content: Text(
+                      ok ? 'Added to "${lists.active!.name}"' : 'Could not add',
+                    ),
+                  ),
+                );
+              },
+            ),
           if (loggedIn)
             IconButton(
               tooltip: 'Edit',
@@ -95,7 +124,9 @@ class _ProductScreenState extends State<ProductScreen> {
                 if (!mounted) return;
                 if (ok == true) {
                   messenger.showSnackBar(
-                    const SnackBar(content: Text('Photo uploaded. Pull to refresh images.')),
+                    const SnackBar(
+                        content:
+                            Text('Photo uploaded. Pull to refresh images.')),
                   );
                 }
               },
@@ -125,21 +156,22 @@ class _ProductScreenState extends State<ProductScreen> {
                   const SizedBox(height: 16),
                   _Ingredients(text: product.ingredientsText!),
                 ],
-                if ((product.allergens?.isNotEmpty ?? false) || (product.additives?.isNotEmpty ?? false))
-                  ...[
-                    const SizedBox(height: 16),
-                    _AllergensAdditives(
-                      allergens: product.allergens ?? const [],
-                      additives: product.additives ?? const [],
-                    ),
-                  ],
+                if ((product.allergens?.isNotEmpty ?? false) ||
+                    (product.additives?.isNotEmpty ?? false)) ...[
+                  const SizedBox(height: 16),
+                  _AllergensAdditives(
+                    allergens: product.allergens ?? const [],
+                    additives: product.additives ?? const [],
+                  ),
+                ],
                 const SizedBox(height: 16),
                 OutlinedButton.icon(
                   onPressed: () => showModalBottomSheet<void>(
                     context: context,
                     showDragHandle: true,
                     isScrollControlled: true,
-                    builder: (_) => RobotoffQuestionsSheet(barcode: product.barcode),
+                    builder: (_) =>
+                        RobotoffQuestionsSheet(barcode: product.barcode),
                   ),
                   icon: const Icon(Icons.question_mark),
                   label: const Text('Questions'),
@@ -157,7 +189,8 @@ class _ProductScreenState extends State<ProductScreen> {
                     const SizedBox(width: 12),
                     Expanded(
                       child: OutlinedButton.icon(
-                        onPressed: () => Clipboard.setData(ClipboardData(text: product.barcode)),
+                        onPressed: () => Clipboard.setData(
+                            ClipboardData(text: product.barcode)),
                         icon: const Icon(Icons.copy),
                         label: const Text('Copy barcode'),
                       ),
@@ -215,7 +248,8 @@ class _Overview extends StatelessWidget {
     return Column(
       crossAxisAlignment: CrossAxisAlignment.start,
       children: [
-        Text(product.name ?? 'Unnamed product', style: Theme.of(context).textTheme.headlineSmall),
+        Text(product.name ?? 'Unnamed product',
+            style: Theme.of(context).textTheme.headlineSmall),
         const SizedBox(height: 4),
         Text('Brand: ${product.brand ?? '—'}'),
         const SizedBox(height: 8),
@@ -232,7 +266,9 @@ class _Nutrition extends StatelessWidget {
   const _Nutrition({required this.product});
 
   Widget _kv(BuildContext ctx, String label, double? v, {String unit = 'g'}) {
-    final text = (v == null) ? '—' : (v.toStringAsFixed(v == v.roundToDouble() ? 0 : 1) + unit);
+    final text = (v == null)
+        ? '—'
+        : (v.toStringAsFixed(v == v.roundToDouble() ? 0 : 1) + unit);
     return Column(
       crossAxisAlignment: CrossAxisAlignment.start,
       children: [
@@ -251,7 +287,8 @@ class _Nutrition extends StatelessWidget {
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
-            Text('Nutrition (per 100g/ml)', style: Theme.of(context).textTheme.titleMedium),
+            Text('Nutrition (per 100g/ml)',
+                style: Theme.of(context).textTheme.titleMedium),
             const SizedBox(height: 12),
             Wrap(
               spacing: 24,
@@ -308,13 +345,27 @@ class _AllergensAdditives extends StatelessWidget {
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
-            Text('Allergens & additives', style: Theme.of(context).textTheme.titleMedium),
+            Text('Allergens & additives',
+                style: Theme.of(context).textTheme.titleMedium),
             const SizedBox(height: 8),
-            if (allergens.isEmpty) const Text('Allergens: —')
-            else Wrap(spacing: 8, runSpacing: 8, children: allergens.map((a) => Chip(label: Text(a))).toList()),
+            if (allergens.isEmpty)
+              const Text('Allergens: —')
+            else
+              Wrap(
+                  spacing: 8,
+                  runSpacing: 8,
+                  children:
+                      allergens.map((a) => Chip(label: Text(a))).toList()),
             const SizedBox(height: 8),
-            if (additives.isEmpty) const Text('Additives: —')
-            else Wrap(spacing: 8, runSpacing: 8, children: additives.map((a) => Chip(label: Text(a.toUpperCase()))).toList()),
+            if (additives.isEmpty)
+              const Text('Additives: —')
+            else
+              Wrap(
+                  spacing: 8,
+                  runSpacing: 8,
+                  children: additives
+                      .map((a) => Chip(label: Text(a.toUpperCase())))
+                      .toList()),
           ],
         ),
       ),
@@ -348,7 +399,8 @@ class _NotFound extends StatelessWidget {
                   label: const Text('Scan another'),
                 ),
                 OutlinedButton.icon(
-                  onPressed: () => Clipboard.setData(ClipboardData(text: barcode)),
+                  onPressed: () =>
+                      Clipboard.setData(ClipboardData(text: barcode)),
                   icon: const Icon(Icons.copy),
                   label: const Text('Copy code'),
                 ),
